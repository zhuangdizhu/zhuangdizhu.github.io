<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhuangdi Zhu</title>
    <link>https://zhuangdizhu.github.io/</link>
      <atom:link href="https://zhuangdizhu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Zhuangdi Zhu</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2023 Zhuangdi Zhu</copyright><lastBuildDate>Sat, 23 Sep 2023 13:08:20 +0800</lastBuildDate>
    <image>
      <url>https://zhuangdizhu.github.io/media/icon_hucab448affb9213f36d8e962fe68c6b19_391842_512x512_fill_lanczos_center_3.png</url>
      <title>Zhuangdi Zhu</title>
      <link>https://zhuangdizhu.github.io/</link>
    </image>
    
    <item>
      <title>Transfer Learning in Deep Reinforcement Learning: A Survey</title>
      <link>https://zhuangdizhu.github.io/publication/rlsurvey/</link>
      <pubDate>Sat, 23 Sep 2023 13:08:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/publication/rlsurvey/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resilient and Communication Efficient Learning for Heterogeneous Federated Systems</title>
      <link>https://zhuangdizhu.github.io/publication/fedrescue/</link>
      <pubDate>Thu, 02 Jun 2022 13:08:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/publication/fedrescue/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Self-Adaptive Imitation Learning: Learning Tasks with Delayed Rewards from Sub-Optimal Demonstrations.</title>
      <link>https://zhuangdizhu.github.io/publication/sail/</link>
      <pubDate>Thu, 02 Jun 2022 13:08:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/publication/sail/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Federated adversarial debiasing for fair and transferable representations</title>
      <link>https://zhuangdizhu.github.io/publication/fedebias/</link>
      <pubDate>Sat, 14 Aug 2021 13:08:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/publication/fedebias/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data-Free Knowledge Distillation for Heterogeneous Federated Learning</title>
      <link>https://zhuangdizhu.github.io/publication/fedgen/</link>
      <pubDate>Wed, 02 Jun 2021 13:08:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/publication/fedgen/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Off-Policy Imitation Learning from Observations</title>
      <link>https://zhuangdizhu.github.io/publication/opolo/</link>
      <pubDate>Tue, 02 Jun 2020 13:08:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/publication/opolo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Federated Learning</title>
      <link>https://zhuangdizhu.github.io/project/federated-learning/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://zhuangdizhu.github.io/project/federated-learning/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://zhuangdizhu.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://zhuangdizhu.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
   One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   **Two** 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three 
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evaluate Binary Classification with Keras</title>
      <link>https://zhuangdizhu.github.io/post/keras-eval-binary-classification/</link>
      <pubDate>Thu, 15 Nov 2018 23:24:41 -0500</pubDate>
      <guid>https://zhuangdizhu.github.io/post/keras-eval-binary-classification/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;keras.io&#34;&gt;Keras&lt;/a&gt; provides very convenient tools for fast protyping Machine Learning models, especially neural networks. You can pass &lt;a href=&#34;https://keras.io/metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;metric functions&lt;/a&gt; when compiling a model, to evaluate the learnt models. However in the current version (after v2.0.0), Keras no longer provides widely used binary-classification metrics, e.g., recall, f1score, etc. The reason is clearly explained in &lt;a href=&#34;https://github.com/keras-team/keras/issues/5794#issuecomment-287641301&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keras issue #5794&lt;/a&gt;. In this posts, we are going to dicuss a working-around to evaluate these metrics with Keras.&lt;/p&gt;
&lt;!--more---&gt;
&lt;h2 id=&#34;why-not-use-global-metrics&#34;&gt;Why not use global metrics&lt;/h2&gt;
&lt;p&gt;That is the metrics evaluated in Keras are batch-wise only. The epoch output metric values are averaged like: $${\sum \text{(batch metric)} * \text{(batch size)} \over \text{(# batch)} * \text{(batch size)}}$$. This is okay for batch-wise metric like accuracy: $${\sum \text{(batch #TP + #TN)/(batch size)} * \text{(batch size)} \over \text{(# batch)} * \text{(batch size)}} = {\text{(#TP + #TN)} \over \text{(total #sample)}}$$. For global metrics, e.g., recall, the average is improper: $${\sum \text{(batch #TP)/(batch #TP + #FN)} * \text{(batch size)} \over \text{(# batch)} * \text{(batch size)}} \neq {\text{(#TP)} \over \text{(total #TP + #FN)}}$$. Of course, when you use a relatively large batch size and a large number of batches, the average will be close to the global value. However, there will aften be a large gap between the average and global value. Especially for AUC value, the computation is danguous.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t mind the bias caused by the average, you could use metrics passed to &lt;code&gt;model.compile(...)&lt;/code&gt;, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def recall(y_true, y_pred, is_categorical=True):
    &amp;quot;&amp;quot;&amp;quot;Recall metric.	
     Only computes a batch-wise average of recall.	
     Computes the recall, a metric for multi-label classification of	
    how many relevant items are selected.	
    &amp;quot;&amp;quot;&amp;quot;
    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
    recall = true_positives / (possible_positives + K.epsilon())
    return recall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is notable that the &lt;code&gt;K.epsilon()&lt;/code&gt; has to be used in the division, because &lt;code&gt;possible_positives&lt;/code&gt; could be zero in one batch.&lt;/p&gt;
&lt;h2 id=&#34;existing-solutions&#34;&gt;Existing solutions&lt;/h2&gt;
&lt;h3 id=&#34;batch-wise-estimation&#34;&gt;Batch-wise estimation&lt;/h3&gt;
&lt;p&gt;In addtion to the example mentioned above, there are some discussion on the batch-wise estimation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decorate tensorflow metrics: &lt;a href=&#34;https://stackoverflow.com/a/50566908/3503604&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to calculate precision and recall in Keras&lt;/a&gt;, which seems not working now.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;better-practice&#34;&gt;Better Practice&lt;/h2&gt;
&lt;h3 id=&#34;predict-and-evaluate-metrics&#34;&gt;Predict and evaluate metrics&lt;/h3&gt;
&lt;p&gt;Compute the global metric value on epoch end.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class Metrics(keras.callbacks.Callback):
    def __init__(self, validation_data):
        self.validation_data = validation_data
    def on_epoch_end(self, batch, logs={}):
        predict = np.asarray(self.model.predict(self.validation_data[0]))
        targ = self.validation_data[1]
        self.f1s=f1(targ, predict)
        return
metrics = Metrics([X_test,y_test])
model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=[X_test,y_test], 
       verbose=1, callbacks=[metrics])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[Source codes from &lt;a href=&#34;https://github.com/keras-team/keras/issues/5794#issuecomment-303683985&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;comment in Keras issue # 5794&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;However, this solution will be time-comsuming to run &lt;code&gt;model.predict&lt;/code&gt; on the epoch end. The prediction procdure is actually evaluated during training. The repitation is wasteful.&lt;/p&gt;
&lt;h3 id=&#34;a-keras-metrics-package&#34;&gt;A keras-metrics package&lt;/h3&gt;
&lt;p&gt;One thought to tackle the issue is to fetch predictions from the model and then evaluate metrics. A close solution is given in &lt;a href=&#34;https://github.com/netrack/keras-metrics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keras-metrics&lt;/a&gt;. In the package, they create a class to store history record of true positive, false positive and so on. However the test case and example given by the authors cannot demonstrate the effectiveness. One drawback of their solution is that they do not solve the &lt;em&gt;averaging&lt;/em&gt; problem.&lt;/p&gt;
&lt;p&gt;However, the keras-metrics package is only effective in the Keras (&amp;gt;=v2.1.6) which will avoid averaging metrics which are stateful &lt;a href=&#34;https://github.com/keras-team/keras/blob/75a35032e194a2d065b0071a9e786adf6cee83ea/keras/engine/base_layer.py#L22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Layer&lt;/a&gt; instances. Look at &lt;a href=&#34;https://github.com/keras-team/keras/blob/75a35032e194a2d065b0071a9e786adf6cee83ea/keras/callbacks.py#L204&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BaseLogger&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;official-updates-in-keras-v216-for-stateful-metrics&#34;&gt;Official updates in Keras v2.1.6 for stateful metrics&lt;/h3&gt;
&lt;p&gt;Until today, there has been some updates in Keras. You can find Pull-Request: &lt;a href=&#34;https://github.com/keras-team/keras/pull/9253&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PR#9253: Add support for stateful metrics.&lt;/a&gt; and &lt;a href=&#34;https://github.com/keras-team/keras/pull/9446&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PR#9446: General stateful metrics fixes&lt;/a&gt;.
However there is still no official metrics for recall, f1score etc.&lt;/p&gt;
&lt;h3 id=&#34;customize-stateful-metrics&#34;&gt;Customize stateful metrics&lt;/h3&gt;
&lt;p&gt;If you have update Keras to &lt;code&gt;v2.1.6&lt;/code&gt; which supports &amp;lsquo;stateful metrics&amp;rsquo;, then you can try to customize some metric like the one in &lt;a href=&#34;https://stackoverflow.com/a/51412555/3503604&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The best reference is the &lt;a href=&#34;https://github.com/keras-team/keras/blob/75a35032e194a2d065b0071a9e786adf6cee83ea/tests/keras/metrics_test.py#L127&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BinaryTruePositives&lt;/a&gt; class provided by Keras test case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Decorator</title>
      <link>https://zhuangdizhu.github.io/post/python-decorator/</link>
      <pubDate>Thu, 15 Nov 2018 11:47:06 -0500</pubDate>
      <guid>https://zhuangdizhu.github.io/post/python-decorator/</guid>
      <description>&lt;p&gt;When refactoring a codes, we need to extract duplicated features from different methods or functions. A magic in Python 3 is to decorate the a striped basic functions with sharing features.&lt;/p&gt;
&lt;h2 id=&#34;what-is-decorator&#34;&gt;What is decorator?&lt;/h2&gt;
&lt;p&gt;A (almost) minimal demo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps
def my_decorator(func):
  # to make sure func name are included.
  @wraps(func)
  def wrapper(x):
    &amp;quot;&amp;quot;&amp;quot; function wrapper of my_decorator &amp;quot;&amp;quot;&amp;quot;
    print(&amp;quot; Hi, &amp;quot;) + func.__name__ + &amp;quot; return.&amp;quot;)
    return func(x)
  return wrapper

# use decorator
@my_decorator
def foo(x):
  return x + 1

foo(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;why-decorator&#34;&gt;Why decorator?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python-course.eu/python3_memoization.php#callable%20class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Memoization&lt;/a&gt;: speed up function evaluation by storing the &lt;code&gt;{input: output}&lt;/code&gt; dict.&lt;/li&gt;
&lt;li&gt;Decorate a function with additional processes which probably are duplicated from other funcs. For example, you can count the evaluation times in a decorator.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;use-class-as-a-decorator&#34;&gt;Use class as a decorator&lt;/h2&gt;
&lt;p&gt;You can transform class into function by adding a &lt;code&gt;__call__&lt;/code&gt; method to the class.&lt;/p&gt;
&lt;p&gt;Decorator demo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class my_decorator:
  def __init__(self, f):
    self.f = f
  
  def __call__(self):
    print(&amp;quot;Decorating &amp;quot;, self.f.__name__)
    self.f()

@my_decorator
def foo():
  print(&amp;quot;hello from foo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Further reading: &lt;a href=&#34;https://www.python-course.eu/python3_decorators.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python3 decorators tutorial&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Differentially Private Learning</title>
      <link>https://zhuangdizhu.github.io/project/private-learning/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://zhuangdizhu.github.io/project/private-learning/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linux Rookie Book</title>
      <link>https://zhuangdizhu.github.io/post/linux-rookie/</link>
      <pubDate>Mon, 11 Jun 2018 18:11:46 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/post/linux-rookie/</guid>
      <description>&lt;p&gt;As a MS student, I am going to leave my lab at USTC. With this post, I&amp;rsquo;d like to share my experiences on the Linux system, especially for those who are new to such a system.&lt;/p&gt;
&lt;h1 id=&#34;part-1-introduction&#34;&gt;Part 1: Introduction&lt;/h1&gt;
&lt;h2 id=&#34;for-whom-is-the-post-written&#34;&gt;For whom is the post written?&lt;/h2&gt;
&lt;p&gt;The audiances are expected to be&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first-year student for MSc of CS.&lt;/li&gt;
&lt;li&gt;He/She is to do research on fields, including Software Developing, Maching Learning and related directions.&lt;/li&gt;
&lt;li&gt;He/She eager to pay time to solve issues by themselves in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, it&amp;rsquo;s better to clarify who is not the potential audiances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Who expect to find all solutions to their works on Linux.&lt;/em&gt; The space is limit so as not possible to do that.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Who expect to be a master of the problems introduced here.&lt;/em&gt; This is an small cookbook, not encyclopedia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most importantly, remember that I am just a student, but not a master in these fields. Thus, there is hich chance that I could be wrong.&lt;/p&gt;
&lt;h2 id=&#34;why-english-rather-than-chinese&#34;&gt;Why English rather than Chinese?&lt;/h2&gt;
&lt;p&gt;You may wonder why the post is written in English, while the readers are mostly speaking Chinese.
This is just my opinion that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;English is more efficient for people to find answers from Google, stackoverflow and so on.&lt;/li&gt;
&lt;li&gt;English is in every corner of the programmers&amp;rsquo; world, in the documents of python language, in the books of cutting-edge techniques and so on.&lt;/li&gt;
&lt;li&gt;The comments and programming variables are in English. When you are familiar with English, esp. some special terminologies, it&amp;rsquo;s more possible for you to understand the comments, variables and therefore the codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-this-post-will-be-organized&#34;&gt;How this post will be organized?&lt;/h2&gt;
&lt;p&gt;Basically, I will organize the post centered in several crucial tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to access files you want?&lt;/li&gt;
&lt;li&gt;How to run Matlab codes?&lt;/li&gt;
&lt;li&gt;How to submit a PBS job?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These questions are under the conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no monitor (or screen) if not specified.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shell: it is actually the command line tool you used in the Linux to interact with the whole system.&lt;/li&gt;
&lt;li&gt;bash: it is one kind of shell. If not specified, I refer shell to bash here. Both &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;shell&lt;/code&gt; are softwares.&lt;/li&gt;
&lt;li&gt;Ubuntu: A Linux system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let&amp;rsquo;s rock!&lt;/p&gt;
&lt;h1 id=&#34;part-2-access-your-files&#34;&gt;Part 2: Access your files&lt;/h1&gt;
&lt;p&gt;This is the very first question to every Linux user: &lt;em&gt;Where can I find my files?&lt;/em&gt; or &lt;em&gt;How can I handle my files?&lt;/em&gt;
This question could include several parts. I will demonstrate them with comments (started with &lt;code&gt;#&lt;/code&gt;). The exected shell commands are displayed with a &lt;code&gt;$&lt;/code&gt; at the begining.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ls  # (l)i(s)t all files under current folder
$ cd hello # (C)hange (D)irectory to &#39;hello&#39; folder
$ vim aa.txt # edit text file or any other files. `vim` is a software
$ rm aa.txt # (R)e(M)ove file
$ cp aa.txt bb.txt # (c)o(p)y from aa.txt to bb.txt
$ man cp # open the manual of command `cp`, and press `q` to quit.
$ cat aa.txt # print the content
$ ssh jyhong@129.0.0.1 # log into server: `ssh &amp;lt;username&amp;gt;@&amp;lt;server address or IP&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- To record terminal: https://asciinema.org/docs/embedding

&lt;script src=&#34;https://asciinema.org/a/MFy5RicpxMVrcFqfFvaEH8WgY.js&#34; id=&#34;asciicast-MFy5RicpxMVrcFqfFvaEH8WgY&#34; async&gt;&lt;/script&gt; --&gt;
&lt;h1 id=&#34;part-3-run-matlab-codes&#34;&gt;Part 3: Run Matlab codes&lt;/h1&gt;
&lt;p&gt;There are two ways to do that. One is with your familiar window, while the other is simply a commandline tool.&lt;/p&gt;
&lt;h2 id=&#34;run-locally-like&#34;&gt;Run locally-like&lt;/h2&gt;
&lt;p&gt;You must be familiar with Matlab&amp;rsquo;s Graphic User Interface (GUI). It could freak me out when I found I can do things with the familiar interface. But, soon, it turns out that it&amp;rsquo;s unnecessary.
The strategy is based on forwarding x-window. See &lt;a href=&#34;#use-gui-software-remotely&#34;&gt;Use GUI software remotely&lt;/a&gt; for more information. Here are commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ssh -X ubri # &#39;-X&#39; means the remote GUI display will be forwarded to local.
$ jyhong@ubri &amp;gt; matlab # run the matlab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you should get into your familiar zone.
If no GUI window appears, try one of these:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run Matlab using absolute path.&lt;/li&gt;
&lt;li&gt;Check the &lt;code&gt;~/.bashrc&lt;/code&gt; file, if there is a setting of &lt;code&gt;matlab&lt;/code&gt; to disable GUI, e.g., &lt;code&gt;matlab -nodisplay&lt;/code&gt; will do that.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;run-in-command-line&#34;&gt;Run in command line&lt;/h2&gt;
&lt;p&gt;It is straightforward to run Matlab in command line. Just run &lt;code&gt;matlab&lt;/code&gt;.
If the command is not found, add below line to your &lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias matlab=&amp;quot;/opt/MATLAB/R2016a/bin/matlab -nodisplay -singleCompThread&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which use the command &lt;code&gt;matlab&lt;/code&gt; to represent the later long one.&lt;/p&gt;
&lt;h1 id=&#34;part-4-submit-a-pbs-job&#34;&gt;Part 4: Submit a PBS job&lt;/h1&gt;
&lt;p&gt;When you first log into the server, you could see some information about the job management sysetm, torque&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Some common steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the &lt;code&gt;template.pbs&lt;/code&gt; file: &lt;code&gt;cp template.pbs myjob.pbs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add your run command to the last line of the &lt;code&gt;pbs&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Submit it:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;qsub myjob.pbs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;qsub -d `pwd` myjob.pbs
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;part-5-useful-tools&#34;&gt;Part 5: Useful tools&lt;/h1&gt;
&lt;h2 id=&#34;use-gui-software-remotely&#34;&gt;Use GUI software remotely&lt;/h2&gt;
&lt;p&gt;Basically, you can run any GUI software remotely after you log in with below comnand:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh -X urbi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unless the remote system is not GUI-based. For example, the server version of Ubuntu. The operation is supported natively by most Linux desktop system. If you want to use it at Windows, try &lt;a href=&#34;https://www.netsarang.com/products/xsh_key_features.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XShell&lt;/a&gt; (See &amp;lsquo;&lt;em&gt;Launch X Applications Through an SSH Tunnel&lt;/em&gt;&amp;rsquo; feature), which is a powerful tool for using &lt;code&gt;ssh&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://bicmr.pku.edu.cn/~wenzw/pages/batch.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://bicmr.pku.edu.cn/~wenzw/pages/batch.html&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.adaptivecomputing.com/torque/4-0-2/Content/topics/commands/qsub.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://docs.adaptivecomputing.com/torque/4-0-2/Content/topics/commands/qsub.htm&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Subspace Learning</title>
      <link>https://zhuangdizhu.github.io/project/subspace-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://zhuangdizhu.github.io/project/subspace-learning/</guid>
      <description></description>
    </item>
    
    <item>
      <title>NSTableView automatically adjust height to fit cell view</title>
      <link>https://zhuangdizhu.github.io/post/2015-08-04-nstableview-automatically-adjust-height-to-fit-cell-view/</link>
      <pubDate>Tue, 04 Aug 2015 18:11:46 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/post/2015-08-04-nstableview-automatically-adjust-height-to-fit-cell-view/</guid>
      <description>&lt;!-- {% include JB/setup %} --&gt;
&lt;p&gt;Reference: &lt;a href=&#34;http://blog.amyworrall.com/post/66085151655/using-auto-layout-to-calculate-table-cell-height&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using auto-layout to calculate table cell height&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In &amp;lsquo;&lt;a href=&#34;http://blog.amyworrall.com/post/66085151655/using-auto-layout-to-calculate-table-cell-height&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using auto-layout to calculate table cell height&lt;/a&gt;&amp;rsquo;, it&amp;rsquo;s introduced how to use auto-layout to update table view&amp;rsquo;s (UITableView) cell height with Objective-C language. However there is different at NSTableView.&lt;/p&gt;
&lt;p&gt;Here I will introduce to do similar thing at NSTableView with Swift language. Remember one thing post &amp;lsquo;Using auto-layout to calculate table cell height&amp;rsquo; has warned that this method is not that efficient, figure out the way make it more efficient yourself.&lt;/p&gt;
&lt;p&gt;Assuming you have been familiar with the mechanism of NSTableView, including NSTableViewDelegate and NSTableViewDataSource, I will not introduce these knowledge in detail below.&lt;/p&gt;
&lt;p&gt;When configure table cell view, it&amp;rsquo;s helpful later if you seperate some configure functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func tableView(tableView: NSTableView, viewForTableColumn tableColumn: NSTableColumn?, row: Int) -&amp;gt; NSView? {
    var cell = tableView.makeViewWithIdentifier(&amp;quot;InMessageCellView&amp;quot;, owner: self)
    if let cl = cell {
        // Do data configures in &#39;configureCell&#39; function.
        cell = configureCell(cl, row: row)
    }
    return cell
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then tell NSTableView the height of row:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let defaultRowHeight = CGFloat(36)
func tableView(tableView: NSTableView, heightOfRow row: Int) -&amp;gt; CGFloat {
    var cell = tableView.makeViewWithIdentifier(&amp;quot;InMessageCellView&amp;quot;, owner: self)
    if let cl = cell {
        cell = configureCell(cl, row: row)
        // Let NSView to update its layout automatically.
        cell!.layoutSubtreeIfNeeded()
        // Return the updated frame height.
        // Remember to setup constraints in Xcode&#39;s stroyboard, which should limit 
        // the cell&#39;s height corespond to subview(like text view).
        return cell!.frame.height
    }
    return defaultRowHeight
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refer from Apple&amp;rsquo;s documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although table views may cache the returned values, you should ensure that this method is efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So be careful about performance, read more about it to visit reference&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; .&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18746929/using-auto-layout-in-uitableview-for-dynamic-cell-layouts-variable-row-heights&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using Auto Layout in UITableView for dynamic cell layouts &amp;amp; variable row heights&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Make text table view(NSTableView) auto resize</title>
      <link>https://zhuangdizhu.github.io/post/2015-08-04-make-text-table-viewnstableview-auto-resize/</link>
      <pubDate>Tue, 04 Aug 2015 18:11:20 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/post/2015-08-04-make-text-table-viewnstableview-auto-resize/</guid>
      <description>&lt;!-- {% include JB/setup %} --&gt;
&lt;p&gt;To make a iMessage-like chat table view, there is several steps to follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text field should be able to adjust its size automatically.&lt;/li&gt;
&lt;li&gt;Image view of bubble should adjust automatically relative to text field.&lt;/li&gt;
&lt;li&gt;Table view&amp;rsquo;s row should be fitted into the row cell&amp;rsquo;s subview, which include text field and image view.&lt;/li&gt;
&lt;li&gt;Let scroller auto scroll to bottum.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here I use View-based NSTableView to make these:&lt;/p&gt;














&lt;figure  id=&#34;figure-table-view-settings&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://zhuangdizhu.github.io/img/post/table_view_settings.png&#34; alt=&#34;Table view settings&#34; loading=&#34;lazy&#34; data-zoomable width=&#34;40%&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Table view settings
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;There is some import constraints to make the three components, NSImageView, NSTextField, NSTableViewCell, keep corresponded size, which is showed below:&lt;/p&gt;














&lt;figure  id=&#34;figure-cell-contraint-settings&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://zhuangdizhu.github.io/img/post/cell_constraint.png&#34; alt=&#34;Cell contraint settings&#34; loading=&#34;lazy&#34; data-zoomable width=&#34;80%&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Cell contraint settings
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;You should set NSTextField like below, which will make it auto adjust size to text:&lt;/p&gt;














&lt;figure  id=&#34;figure-text-field-settings&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://zhuangdizhu.github.io/img/post/text_field_settings.png&#34; alt=&#34;Text field settings&#34; loading=&#34;lazy&#34; data-zoomable width=&#34;40%&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Text field settings
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Then use NSTableViewDelegate to adjust height. Read this post: &lt;a href=&#34;https://zhuangdizhu.github.io/post/2015-08-04-nstableview-automatically-adjust-height-to-fit-cell-view/&#34;&gt;NSTableView automatically adjust height to fit cell view&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, when you add a new row at bottum, you will hope the scroller to scroll to bottum.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dispatch_async(dispatch_get_main_queue(), { () -&amp;gt; Void in
    // tableView is IBOutlet refer to table view.
    self.tableView.insertRowsAtIndexes(NSIndexSet(index: self.tableView.numberOfRows), withAnimation: NSTableViewAnimationOptions.EffectNone)
    self.tableView.noteHeightOfRowsWithIndexesChanged(NSIndexSet(index: self.tableView.numberOfRows - 1))
    // scroll
    self.tableView.scrollRowToVisible(self.tableView.numberOfRows - 1)
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Add 3rd part dynamic library (.dylib) to Xcode target</title>
      <link>https://zhuangdizhu.github.io/post/2015-07-29-add-3rd-part-dynamic-library-dylib-to-xcode-target/</link>
      <pubDate>Wed, 29 Jul 2015 18:11:46 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/post/2015-07-29-add-3rd-part-dynamic-library-dylib-to-xcode-target/</guid>
      <description>&lt;!-- {% include JB/setup %} --&gt;
&lt;p&gt;Dynamic library (with .dylib suffix at UNIX-like OS) is a kind of library discriminated from static library (with .a suffix). Static library will be linked at linking stage instantly after codes are compiled, before binary product output. And instead library is loaded at runtime, I mean load but not link. Load means the executable file will search for binary library when they need it. That&amp;rsquo;s why some app will announce you that it lack a lib when you double click them for running happily. In contrast, static library will compile these needed part into you app, so the user will not be bothered.&lt;/p&gt;
&lt;h4 id=&#34;then-why-we-use-dynamic-library&#34;&gt;Then why we use dynamic library?&lt;/h4&gt;
&lt;p&gt;That&amp;rsquo;s file size! A static library is several times bigger than a same function dynamic library. For example the SDL lib at OS X, which is located at /usr/local/Cellar/sdl2/2.0.3/lib/  if you install it through Homebrew.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls /usr/local/Cellar/sdl2/2.0.3/lib/ -lh
-r--r--r-- 1 user admin 850K Jul 20 22:18 libSDL2-2.0.0.dylib
-r--r--r-- 1 user admin 1.5M Oct 22  2014 libSDL2.a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two method to add 3rd-part dynamic library to a Xcode target:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the library into your system&lt;/li&gt;
&lt;li&gt;Copy your library into your product.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;method-1-install-the-library&#34;&gt;Method 1: Install the library&lt;/h3&gt;
&lt;p&gt;For most library, 3rd part library can be installed into system, at &lt;code&gt;/usr/local/lib or /usr/lib&lt;/code&gt;. Then just add header path to &lt;code&gt;Xcode target &amp;gt; Build Setting&lt;/code&gt;, if the header file is not be found by Xcode. Finally, link your library at &lt;code&gt;Xcode target &amp;gt; Build Phase &amp;gt; Linked Libraries and Frameworks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, this method doesn&amp;rsquo;t allow your app user to use app freely, since it require the user to install the library too. That&amp;rsquo;s terrible for an app.&lt;/p&gt;
&lt;h3 id=&#34;method-2-copy-dylib-file-into-your-product&#34;&gt;Method 2: Copy .dylib file into your product&lt;/h3&gt;
&lt;p&gt;So it&amp;rsquo;s obvious that a better way to use dynamic library is bundle the .dylib with .app file. Path relative  yourself is better than relative to system.&lt;/p&gt;
&lt;p&gt;How the executable binary file inform system which and where library is needed?&lt;/p&gt;
&lt;p&gt;Since a program starts from its binary file, file is the only one from who system can get information about linked library. Or we can say the binary file is the bridge between developer and user&amp;rsquo;s system, compiler and linker are the builders. So, we should ask the binary file for the answer directly with  otool provided by OS X.&lt;/p&gt;
&lt;p&gt;Assume I have a project named Vivi, output file Vivi.app . Vivi used two of my framework named ViviSwiften.framework and ViviInterface.framework , they are in the same project as Vivi. Although you run an App by double click it, but it&amp;rsquo;s not a binary file indeed. The executable binary file is located at AppName.app/Contents/MacOS/AppName instead.&lt;/p&gt;
&lt;p&gt;Ask Vivi binary file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ otool -L Vivi.app/Contents/MacOS/Vivi 
Vivi.app/Contents/MacOS/Vivi:
    @rpath/ViviInterface.framework/Versions/A/ViviInterface (compatibility version 1.0.0, current version 1.0.0)
    @rpath/ViviSwiften.framework/Versions/A/ViviSwiften (compatibility version 1.0.0, current version 1.0.0)
    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1223.0.0)
    /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit (compatibility version 45.0.0, current version 1387.1.0)
    /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1225.0.0)
    /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)
    @rpath/libswiftAppKit.dylib (compatibility version 0.0.0, current version 0.0.0)
    @rpath/libswiftCore.dylib (compatibility version 0.0.0, current version 0.0.0)
    @rpath/libswiftCoreData.dylib (compatibility version 0.0.0, current version 0.0.0)
    @rpath/libswiftCoreGraphics.dylib (compatibility version 0.0.0, current version 0.0.0)
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems that otool  print the list of path of all linked libraries and their version messages.&lt;/p&gt;
&lt;p&gt;Well, there is so many stuffs. Hey, I found there is my frameworks,  ViviSwiften.framework and ViviInterface.framework. Okay, I know &lt;code&gt;ViviInterface.framework/Versions/A/ViviInterface&lt;/code&gt; is the path point to the binary file of the framework (Different from .app file, framework&amp;rsquo;s binary file is located at FrameworkName.framework/Versions/A/FrameworkName commonly), but what the @rpath means.&lt;/p&gt;
&lt;h4 id=&#34;whats-excutable_path-loader_path-and-rpath1-2-3&#34;&gt;What&amp;rsquo;s @excutable_path, @loader_path and @rpath?&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h4&gt;
&lt;!-- Reference: [OS X Man Page: dyld(1)](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html)(this also can be found by running `man dyld` at OS X), [Run-Path Dependent Libraries](https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/RunpathDependentLibraries.html). --&gt;
&lt;p&gt;The three variable is defined at runtime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@executable_path&lt;/strong&gt;, this always point to the product executable binary file path,  &lt;code&gt;AppName.app/Contents/MacOS/AppName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@loader_path&lt;/strong&gt;, this is dependent on which is the loader. For example, my Vivi.app load the &lt;code&gt;ViviSwiften.framework&lt;/code&gt;, then a dylib linked by ViviSwiften.framework could get two variable &lt;code&gt;@loader_path=/path/to/ViviSwiften.framework/Versions/A/&lt;/code&gt;, and &lt;code&gt;@executable_path=/path/to/Vivi.app/Contents/MacOS/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@rpath&lt;/strong&gt;, this is just a path stored some predefined path. You can set it at &lt;code&gt;Xcode target &amp;gt; Build Setting &amp;gt; Runpath Search Path&lt;/code&gt;. Often there will include &lt;code&gt;@executable_path/../Frameworks&lt;/code&gt; for an App target, &lt;code&gt;@executable_path/../Frameworks and @loader_path/Frameworks&lt;/code&gt; for a Framework target, &lt;code&gt;@executable_path/../Frameworks&lt;/code&gt; and &lt;code&gt;@loader_path/../Frameworks&lt;/code&gt; for a Unit Test target.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we know Vivi.app used ViviSwiften.framework and ViviInterface.framework created by myself, and other system frameworks or libraries. But there is no 3rd part dynamic libraries added by myself (the dylib linked in Vivi.app is auto added by Xcode). The libraries is libSwiften.3.0.dylib which is linked in ViviSwiften.framework. Let&amp;rsquo;s ask ViviSwiften if that is true.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ otool -L ViviSwiften.framework/Versions/A/ViviSwiften
ViviSwiften.framework/Versions/A/ViviSwiften:
    @rpath/ViviSwiften.framework/Versions/A/ViviSwiften (compatibility version 1.0.0, current version 1.0.0)
    @loader_path/Frameworks/libSwiften.3.0.dylib (compatibility version 3.0.0, current version 3.0.0)
    /System/Library/Frameworks/Security.framework/Versions/A/Security (compatibility version 1.0.0, current version 57301.0.0)
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that ViviSwiften.framework used a 3rd part dynamic library libSwiften.dylib  with path &lt;code&gt;@loader_path/Frameworks/libSwiften.3.0.dylib&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;how-system-find-these-libraries-or-frameworks-vivi-example&#34;&gt;How system find these libraries or frameworks? (Vivi example)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;User double clicks to run Vivi.app.&lt;/li&gt;
&lt;li&gt;Vivi.app executes &lt;code&gt;Vivi.app/Contents/MacOS/Vivi&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for dynamic libraries and frameworks needed by Vivi.app.&lt;/li&gt;
&lt;li&gt;Found &lt;code&gt;@rpath/ViviSwiften.framework/Versions/A/ViviSwiften&lt;/code&gt;, which is transferred to  &lt;code&gt;@executable_path/../Frameworks/ViviSwiften/&lt;/code&gt;  then transferred to &lt;code&gt;Vivi.app/Contents/MacOS/Vivi/../Frameworks/ViviSwiften&lt;/code&gt;.framework .&lt;/li&gt;
&lt;li&gt;Search for dynamic libraries and frameworks needed by &lt;code&gt;ViviSwiften.framework&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Found &lt;code&gt;@loader_path/Frameworks/libSwiften.3.0.dylib&lt;/code&gt; which has been transferred to &lt;code&gt;ViviSwiften.framework/Version/A/Frameworks/libSwiften.3.0.dylib&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;how-these-messages-are-written-into-binary-file&#34;&gt;How these messages are written into binary file?&lt;/h4&gt;
&lt;p&gt;Well, we know the messages are inside the binary file, but how they get into there? There are two hard woking builder: compiler and linker. Compiler will mark the needed symbols and pass to linker, Linker will find symbols in libraries you told it. Finally linker will write the needed libraries into executable binary file. If you provide a static library, linker will write the whole file into binary file. Or if you provide a dynamic library, only library path will be written into binary file.&lt;/p&gt;
&lt;h4 id=&#34;where-does-linker-get-the-path-from&#34;&gt;Where does linker get the path from?&lt;/h4&gt;
&lt;p&gt;Unfortunately the path is not provided by developer of the App but the 3rd part library developer. So you can not let Xcode use the path relative your product or use path provided by yourself.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s review ViviSwiften.framework&amp;rsquo;s answer to otool:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ otool -L ViviSwiften.framework/Versions/A/ViviSwiften
ViviSwiften.framework/Versions/A/ViviSwiften:
    @rpath/ViviSwiften.framework/Versions/A/ViviSwiften (compatibility version 1.0.0, current version 1.0.0)
    @loader_path/Frameworks/libSwiften.3.0.dylib (compatibility version 3.0.0, current version 3.0.0)
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We found the first line is the path to ViviSwiften itself. So&amp;hellip;that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;The path describing the self path is called install_name.&lt;/p&gt;
&lt;p&gt;The path provided by ViviSwiften.framework is the correct path as described above. But will the 3rd part library always provide correct path as we expected? No!&lt;/p&gt;
&lt;h4 id=&#34;what-path-will-compiled-3rd-part-library-provide&#34;&gt;What path will compiled 3rd part library provide?&lt;/h4&gt;
&lt;p&gt;There is two situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have installed the library with Homebrew or from source (like make install ). The library will provide path like: &lt;code&gt;/usr/lib/libxxx.dylib&lt;/code&gt;, &lt;code&gt;/usr/local/lib/libxx.dylib&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You just compiled source with &lt;code&gt;./configure&lt;/code&gt; &amp;amp;&amp;amp; make , then the library may provide path like: &lt;code&gt;libxx.dylib&lt;/code&gt; without prefix.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both situation is not expected.&lt;/p&gt;
&lt;h3 id=&#34;change-the-install_name-to-expected&#34;&gt;Change the install_name to expected&lt;/h3&gt;
&lt;p&gt;OS X provide another tool named install_name_tool  for change install_name and linked lib install_name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# change linked lib path
$ install_name_tool -change old new bin_file
# change the library install_name
$ install_name_tool -id new_install_name bin_file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;the-whole-strategy&#34;&gt;The whole strategy&lt;/h3&gt;
&lt;p&gt;As a conclusion, the strategy for adding 3rd part dynamic library into Xcode target is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add library to Build Phase, and add header to search path. This guarantee no compile and link error will occur.&lt;/li&gt;
&lt;li&gt;Let Xcode copy .dylib file into product after compiled. Add &amp;ldquo;New Copy Files Phase&amp;rdquo;, name it &amp;ldquo;Copy Libraries&amp;rdquo; 













&lt;figure  id=&#34;figure-new-copy-phase&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://zhuangdizhu.github.io/img/post/new_copy_phase.jpg&#34; alt=&#34;new copy phase&#34; loading=&#34;lazy&#34; data-zoomable width=&#34;60%&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      new copy phase
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Set the &amp;ldquo;Destination&amp;rdquo; to &amp;ldquo;Frameworks&amp;rdquo;. Add your dylib here.link_dynamic_lib 
&lt;img src=&#34;https://zhuangdizhu.github.io/img/post/link_dynamic_lib.jpg&#34; alt=&#34;link dynamic lib&#34;&gt;
&lt;/li&gt;
&lt;li&gt;Change install_name of library:
&lt;pre&gt;&lt;code&gt;$ install_name_tool -id @loader_path/Frameworks/libSwiften.3.0.dylib libSwiften.3.0.dylib
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s all.&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://www.tanhao.me/pieces/1361.html/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Settingsä¸­çåé@rpath,@loader_path,@executable_path.&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OS X Man Page: dyld(1)&lt;/a&gt; â Apple Developer&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/RunpathDependentLibraries.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Run-Path Dependent Libraries&lt;/a&gt; â Apple Developer&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The method resetTransform of SCNPhysicsBody</title>
      <link>https://zhuangdizhu.github.io/post/2015-02-04-resettransform-at-scnphysicsbody/</link>
      <pubDate>Wed, 04 Feb 2015 18:11:46 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/post/2015-02-04-resettransform-at-scnphysicsbody/</guid>
      <description>&lt;!-- {% include JB/setup %} --&gt;
&lt;p&gt;According to the SceneKit document, the function of &lt;code&gt;resetTransform&lt;/code&gt; is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Updates the position and orientation of a body in the physics simulation to match that of the node to which the body is attached.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Through experiment, I found this is little special.&lt;/p&gt;
&lt;p&gt;If you do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var node = SCNNode(geomentry: SCNBox())
node.position = SCNVector3(0, 1, 0)
node.rotation = SCNVector4(1, 0, 0, CGFloat(M_PI)/2)
node.physicsBody = SCNPhysicsBody(type: .Dynamic, nil)
scene.rootNode.addChildNode(node)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you get the &lt;code&gt;position&lt;/code&gt; and &lt;code&gt;rotation&lt;/code&gt; of &lt;code&gt;node.presentationNode()&lt;/code&gt; in the render delegate, where I mean you need to get the latest and real data, you will found the effect of the setup of node&amp;rsquo;s position and rotation is not work at the begining.&lt;/p&gt;
&lt;p&gt;At the begining, the &lt;code&gt;position&lt;/code&gt; will be &lt;code&gt;(0, 0, 0)&lt;/code&gt;, but not what you have set, &lt;code&gt;(0, 1, 0)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you have read the document about &lt;code&gt;SCNNode.position&lt;/code&gt; and &lt;code&gt;SCNNode.rotation&lt;/code&gt;, you will found:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;position&lt;/p&gt;
&lt;p&gt;The translation applied to the node. &lt;strong&gt;Animatable&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Animatable&lt;/strong&gt; means it will take several frames to get the effect.&lt;/p&gt;
&lt;p&gt;However, it&amp;rsquo;s different when you use resetTransform of SCNPhysicsBody:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var node = SCNNode(geomentry: SCNBox())
node.position = SCNVector3(0, 1, 0)
node.rotation = SCNVector4(1, 0, 0, CGFloat(M_PI)/2)
node.physicsBody = SCNPhysicsBody(type: .Dynamic, nil)
scene.rootNode.addChildNode(node)
node.physicsBody.resetTransform()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The effect will work at the begining.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Start my blog with Jekyll and disqus</title>
      <link>https://zhuangdizhu.github.io/post/2015-02-03-start-my-blog-with-jekyll-and-disqus/</link>
      <pubDate>Tue, 03 Feb 2015 18:11:46 +0800</pubDate>
      <guid>https://zhuangdizhu.github.io/post/2015-02-03-start-my-blog-with-jekyll-and-disqus/</guid>
      <description>&lt;!-- {% include JB/setup %} --&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: this article is first posted in my &lt;a href=&#34;https://jyhong836.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;old website&lt;/a&gt;, which has be deprecated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jekyll is a powerful static website framework, which indead works for GitHub Pages. At the time I found it, I decided to apply it for my github.io as you can see.&lt;/p&gt;
&lt;p&gt;Some useful webpages for install Jekyll at github.io:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jekyllbootstrap.com/usage/jekyll-quick-start.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Host on GitHub in 3 Minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Actually you need only to clone the Jekyll in your gihub.io, or just copy all file from Jekyll.&lt;/p&gt;
&lt;p&gt;Jekyll advise you to clone the jekyll to local with your name and push it to your github.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.io
cd USERNAME.github.com 
git remote set-url origin git@github.com:USERNAME/USERNAME.github.io
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if you have already create a repository at GitHub, you can also copy the files from jekyll to your repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git jekyll-bootstrap
cd jekyll-bootstrap
cp -r ./* router/to/USERNAME.github.io
cd router/to/USERNAME.github.io
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also works honestly.&lt;/p&gt;
&lt;p&gt;Another web about the Jekyll and GitHub: &lt;a href=&#34;http://www.developmentseed.org/blog/2011/09/09/jekyll-github-pages/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using Jekyll and GitHub Pages for Our Site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;_config.yml&lt;/code&gt;, you can add some tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jekyll is easy to add Disqus for comments. You can visit &lt;a href=&#34;https://disqus.com/websites/?utm_source=hongblog&amp;amp;utm_medium=Disqus-Footer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DISQUS&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also use Google Analytics to track your website.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zhuangdizhu.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zhuangdizhu.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
